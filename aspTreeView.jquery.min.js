(function ($) { $.fn.aspTreeView = function (options) { var methods = { init: function (a) { return $(a).each(function () { var a = $(this).data("TreeViewInitialized"); if (!a) { $(this).data("TreeViewInitialized", true); methods.cb_init($(this)); methods.anchor_init($(this)); if (settings.show_menu) { methods.defineMenu(); methods.contextMenu_init($(this)) } } }) }, cb_init: function (a) { var b = a.find("input[type=checkbox]"); b.data("tv_id", a.attr("id")); b.data("type", "checkbox"); b.bind("change.aspTreeView", settings.cb_change) }, anchor_init: function (a) { var b = a.find("a[href^='javascript:__doPostBack']"); b.data("tv_id", a.attr("id")); b.data("type", "anchor"); b.each(function () { var a = methods.getNodeIndex(document.getElementById($(this).attr("id"))); var b = $(this).data("tv_id") + "n" + a + "CheckBox"; var c = $("#" + b); var d = $(this).attr("href"); var e = d.split("'")[d.split("'").length - 2].substring(1).split("\\"); var f = e[e.length - 1]; var g = $(this).text(); c.data("node", { text: g, value: f }) }); b.removeAttr("href"); b.css("cursor", "pointer"); b.css("text-decoration", ""); b.addClass("tree-context-menu"); b.bind("click.aspTreeView", settings.anchor_click) }, contextMenu_init: function (tv) { var htmlMenu = "<div class='contextMenu' id='" + $(tv).attr("id") + "_contextMenu'><ul>"; var bindings = new Object; for (i = 0; i < settings.menu.length; i++) { htmlMenu += "<li id='" + settings.menu[i].id + "'>" + settings.menu[i].text + "<li>"; eval("bindings." + settings.menu[i].id + "=" + settings.menu[i].callback) } htmlMenu += "</ul></div>"; $(tv).append(htmlMenu); $(tv).find("a.tree-context-menu").contextMenu($(tv).attr("id") + "_contextMenu", { bindings: bindings, menuStyle: { width: "auto" } }) }, defineMenu: function () { if (settings.menu) { if (settings.menu instanceof Array) { if (!settings.override_menu) { for (i = 0; i < menu.length; i++) { settings.menu.push(menu[i]) } } } else { $.error("el menu definido por el usuario no es un arreglo.") } } else { settings.menu = menu } }, cb_change: function (a) { methods.toggleChildCheckBoxes(a.target); methods.toggleParentCheckBox(a.target) }, anchor_click: function (a) { var b = methods.getCheckboxFromAnchor(a.target); b.checked = !b.checked; $(b).change() }, toggleChildCheckBoxes: function (a) { var b = "n"; var c = $(a).data("tv_id"); var d = c + b + methods.getNodeIndex(a) + "Nodes"; $("#" + d).find("input[type=checkbox]").attr("checked", a.checked) }, toggleParentCheckBox: function (a) { var b = $(a).data("tv_id"); if (a.checked == false) { var c = methods.getParentNodeById(a, b); if (c) { var d = c.id.substring(0, c.id.search("Nodes")) + "CheckBox"; var e = document.getElementById(d); if (e && $(e).data("type") == "checkbox") { e.checked = false; methods.toggleParentCheckBox(e) } } } }, toggleLeafCheckBoxes: function (a) { var b = "n"; var c = $(a).data("tv_id"); var d = c + b + methods.getNodeIndex(a) + "Nodes"; $("#" + d).find("a[isleaf]").each(function () { var b = methods.getCheckboxFromAnchor(document.getElementById($(this).attr("id"))); b.checked = a.checked }) }, getNodeIndex: function (a) { var b; var c = $(a).data("tv_id"); var d = $(a).data("type"); if (d == "anchor") { b = a.id.substring((c + "t").length) } else if (d == "checkbox") { b = a.id.substring((c + "n").length, a.id.indexOf("CheckBox")) } else { throw new Error('No se reconoce el tipo en el atributo data-type. Debe ser "anchor" o "checkbox"') } return b }, getParentNodeById: function (a, b) { var c = a.parentNode; if (c == null) { return false } if (c.id.search(b) == -1) { return this.getParentNodeById(c, b) } else { return c } }, getCheckboxFromAnchor: function (a) { var b = $(a).data("tv_id"); var c = methods.getNodeIndex(a); var d = b + "n" + c + "CheckBox"; var e = document.getElementById(d); return e }, destroy: function () { $.error("No se ha difinido el método destroy. SE DEBE DEFINIR.") }, getCheckedNodes: function () { var a = []; var b = 0; this.find(":checked").each(function () { var c = { text: $(this).data("node").text, value: $(this).data("node").value }; a[b] = c; b++ }); return a }, uncheckAll: function () { this.find("input[type=checkbox]").attr("checked", false) }, checkNodes: function (a) { if (a instanceof Array) { for (i = 0; i < a.length; i++) { this.CheckNodes(a[i]) } } else { this.find("input[type=checkbox]").filter(function () { return $(this).data("node") && $(this).data("node").value == a }).attr("checked", true).change() } }, menu_checkChildren: function (a) { var b = document.getElementById(a.id); var c = methods.getCheckboxFromAnchor(b); var d = c.checked; c.checked = true; methods.toggleLeafCheckBoxes(c); c.checked = d }, menu_uncheckChildren: function (a) { var b = document.getElementById(a.id); var c = methods.getCheckboxFromAnchor(b); var d = c.checked; c.checked = false; methods.toggleLeafCheckBoxes(c); c.checked = d } }; var menu = [{ id: "checkChildren", text: "Seleccionar Hojas", callback: methods.menu_checkChildren }, { id: "uncheckChildren", text: "Quitar Selección de Hojas", callback: methods.menu_uncheckChildren }]; var settings = $.extend({ cb_change: methods.cb_change, anchor_click: methods.anchor_click, menu: null, override_menu: false, show_menu: true }, options); if (methods[options]) { return methods[options].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof options === "object" || !options) { return methods.init.apply(this, this) } else { $.error("Método " + options + " no existe en jQuery.aspTreeView") } } })(jQuery)